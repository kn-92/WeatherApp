{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","submit","type","placeholder","value","onChange","change","Result","weather","err","location","temp","date","sunrise","sunset","pressure","wind","feelTemp","humid","vision","windDirection","clouds","content","sunriseTime","Date","toLocaleTimeString","sunSet","className","APIkey","App","state","handleLocationSubmit","e","preventDefault","API","fetch","then","response","ok","Error","json","data","setState","prevState","toLocaleString","sys","main","feels_like","humidity","speed","visibility","deg","all","catch","handleInputChange","target","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1584bec9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return ( \r\n        <form onSubmit={props.submit}>\r\n            <input \r\n            type=\"text\" placeholder=\"Wpisz tutaj\" value={props.value}\r\n            onChange={props.change}/>\r\n            <button>Wyszukaj lokalizację</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n\r\n    const{err, location, temp, date, sunrise, sunset, \r\n    pressure, wind, feelTemp, humid, vision, windDirection, clouds} = props.weather;\r\n\r\n    let content = null;\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunSet = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    if(!err && location) {\r\n        content = (\r\n            <>\r\n                <p>Warunki atmosferyczne dla <strong>{location}</strong></p>\r\n                <p>Dane dla dnia i godziny: <strong>{date}</strong></p>\r\n                <p>Aktualna temperatura: <strong>{temp} *C</strong></p>\r\n                <p>Temp. odczuwalna: <strong>{feelTemp} *C</strong></p>\r\n                <p>Wilgotność: <strong>{humid}%</strong></p>\r\n                <p>Wschód słońca: <strong>{sunriseTime}</strong></p>\r\n                <p>Zachód słońca: <strong>{sunSet}</strong></p>\r\n                <p>Ciśnienie atmosferyczne: <strong>{pressure}hPa</strong></p>\r\n                <p>Prędkość wiatru: <strong>{wind}m/s</strong></p>\r\n                <p>Kierunek wiatru: <strong>{windDirection}*</strong></p>\r\n                <p>Zachmurzenie: <strong>{clouds}%</strong></p>\r\n                <p>Widoczność: <strong>{vision}m</strong></p>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return ( \r\n        <div className=\"result\">\r\n            {err ? 'Bład! Miejscowość nie znaleziona lub inny problem ;)' : content}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react'; \nimport './App.css';\nimport Form from './Form'\nimport Result from './Result'\n\n//API openWeather key\nconst APIkey = '00cf9ae50913943b693698e3875c45df';\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    date: '',\n    location: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    feelTemp: '',\n    humid: '',\n    pressure: '',\n    wind: '',\n    windDirection: '',\n    vision: '',\n    clouds: '',\n    err: '',\n    \n  }\n\n  handleLocationSubmit = (e) => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIkey}&units=metric`\n\n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response\n      }\n      throw Error('Bład! Miejscowość nie znaleziona lub inny problem ;)')\n    })\n    .then(response => response.json())\n    .then(data => {\n      this.setState(prevState => ({\n        date: new Date().toLocaleString(),\n        location: prevState.value,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: data.main.temp,\n        feelTemp: data.main.feels_like,\n        humid: data.main.humidity,\n        pressure: data.main.pressure,\n        wind: data.wind.speed,\n        vision: data.visibility,\n        windDirection: data.wind.deg,\n        clouds: data.clouds.all,\n        err: false,\n      }))\n    })\n    .catch(err => {\n      this.setState(prevState => ({\n        err: true,\n        location: prevState.value,  \n      }))\n    })\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    })\n  }\n\n  render() {\n\n    return(\n      <div className=\"App\">\n        <Form \n        value={this.state.value}\n        change={this.handleInputChange}\n        submit={this.handleLocationSubmit}/>\n        <Result\n        weather={this.state} />\n      </div>\n      \n      \n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}